6/25/24
    Today I got my first pass at the enemy AI overhaul working.
    Now they pick out a square based on maximizing damage potential.
    They still move to the square using the old system though.
    Soon I will work on overhauling the AI the rest of the way.

    I will need to introduce a more sophisticated state system,
    a system of keeping track of characters enemies are aware of,
    a utility function which incorporates threats,
    and a more robust AI that ties it all together.

    I'm also thinking of moving attacks of opportunity from traits/conditions.
    If they were triggered by the actions that trigger them (IE moves and ranged attacks),
    then it would be trivially easy to see in advance that an action would cause an AOO

    Quick inventory of things to do:
        AI overhaul
            new state system
            new system for seeing and remembering characters
            proper utility function
            unified turn-planning function
        consider moving reaction triggers to actions that trigger them
        consider moving some bespoke functions into character methods

    Once I'm done with the AI/combat overhaul that I have been working on since I came back,
    I think the next things will be:
        - exploding barrels and the like
        - multiple factions of NPCs (wild animals)
        - decide how to handle the big item/inventory overhaul I have coming
        - resting and healing
        - PC deaths and deathspirals

    Totally arbitrarily, I'm going to call the place I picked things up, Alpha 0.2
    I'm gonna say, broadly, Alpha is for systems, Beta is for content.

    I'm gonna try to finish and upload a functional build after each milestone.
    Each milestone should correspond roughly to a 1-3 week project.

    Alpha
        0.1 - initial build with fruits and coins
        0.2 - build I left off last year
        0.25 present
        0.3 - enemy AI/combat overhaul
        0.4 - stealth, sound (visual), and enemy idle activity
        0.5 - sound (full)
        0.6 - object overhaul (exploding barrels, locked doors, secret passageways, traps, chests, etc)
        0.7 - items and inventories (ammunition, weapon degradation/juggling, throwing+more)
        0.8 - player character overhaul (deaths, resting/healing, replacement?, roles, lvling, etc)
        0.9 - encounter generation overhaul (enemy placement&idle behavior/object placement)
        1.0 - dungeon generation overhaul (room placement, area placements&connections)

    Pre-Beta
        - bug testing
        - optimization
        - revisit some important questions
            - standalone download vs web hosted
            - font/tileset
            - saves, savescumming, run lengths
            - intended to be played multiple times or just once
            - open vs closed source
            - build editor for making bespoke content
            - editor just for me vs editor as content

    Beta
        0.0 - planning
        0.1 - game beginning and end, minimal menu/saves*, tutorialization (maybe just ? screen)
        0.2 - enemy varieties/behaviors/special abilities & enemy factions - first pass (1-3 areas)
        0.3 - area furnishing and proc-gen work - first pass (1-3 areas)
        0.4 - player character overhaul
        0.5 - enemy content - second pass (another 1-3 areas)
        0.6 - area furnishing and proc-gen work - second pass (another 1-3 areas)
        0.7 - graphical overhaul (animations, blood, smoke, explosions, ui, lighting tweaks)
        0.8 - sound overhaul (parameter adjustments, bespoke sounds, spatial sound tweaking)
        0.9 - final content work (finishing area/enemy/object/item/player character additions/tweaks)
        1.0 - bug fixes, optimization, and final round of playtesting and adjustments

    Pre-Release
        - Where is it going?
        - Am I selling it?
        - How will I promote it?
        - Will I work more on this after release or move on to something else?

    Release
        - yippee

    Tomorrow's to do list:
        Enemy turn planner function
            implement breadth first search of nodes
            start on utility function
            add enemy class extension of character class
            add behavior parameters to the enemy extension
            strip out Astar and translate AStoAQ to the best of your abilities
        nitpicks:
            Cave-dwelling enemies should prefer to attack in dim light (reverse penalty)
            Dim light/bright light/darkness should be defined in a flicker-proof way

    Tomorrow's goal:
        Ranged enemies prefer to be far away
        Melee enemies like to be up close

    On the horizon:
        Rework opportunity attacks and have enemies avoid them
        Rework enemy class to incorporate knowledge about where rival characters are(set the stage for sound/stealth)

6/26/24
    Today's to do
        Enemy turn planner:
            implement breadth first search of nodes
            start on utility function
            add enemy class extension to the character class
            add behavior parameters to the enemy extension
            strip out Astar and translate AStoAQ to the best of my abilities
        nitpicks:
            cave-dwelling enemies should prefer to attack in dim light (reverse penalty)
            dim light/bright light/darkness should be defined in a flicker proof way
            prone condition needs to be fixed so that it only triggers once
        
    What I want by end of day
        ranged enemies prefer to be far away - nearly done
        melee enemies prefer to be up close - nearly done
        goblins prefer to fight and to be in darkness - done

    Hypothetical moves need to be implemented.

    I have finished my first pass at breadth first search of nodes!
    now I'm looking at making it efficient,
    adding bresenham lines,
    adding temperment,
    adding hypothetical moves.
        
    Efficiency!
        Switch to nodemap system at some point. a quick trip to indices hell will be okay
        Utility-function-based pruning: if the best move we've planned so far is good enough, stop looking at child nodes of less attacks?

    quick notes on temperments:
        - ranged enemies should want to finish their turns at their max range
        - melee enemies should want to finish their turns up close
        - skirmisher enemies want to end their turns at half their move distance away (run in, hit, run out)
            they also may want to be close to just one player character, and far away from all the others
        - pack enemies like to stay together
        - guerilla enemies like to stay apart
        - light sensitive enemies like to stay in dim light, maybe so do ranged enemies of all kinds
        - enemies may want to put cover between themselves and the player characters/maybe just the player characters with ranged weapons

6/27/24
    Yesterday I wrote a whole new enemy AI breadth-first search algorithm from the ground up.
    It was honestly not too bad once I got into it. It made me feel kind of silly for putting it off so long.
    There are some tweaks I want to make, but it's honestly pretty good already.
    I finished off my work on enemy AI and temperments by just putting in a simple system of enemies preferring to be at their max range.

    Today's work: Mostly cleanup of new enemy AI:
        Efficiency
            make a nodemap
            begin pruning
            heuristic prioritizing
        Bresenham lines?
        Temperment
            Create enemy extension of character class.
            Add temperments
                - Ranged/Sniper (want to be at max range)
                - Brawler (want to be up close)
                - Skirmisher (move in, attack, move away)
                
                - Pack fighter (wants to stay together with allies)
                - Guerilla fighter (wants to stay apart)

                - Bold (wants to be next to as many PCs as possible)
                - Sly (wants to be next to exactly 1 PC)
        Hypothetical moves/hazards
            Hypothetical moves need to make enemies not ignore difficult terrain when planning their turns
            Add the property of "Warnings" to actions
            Make attacks and moves that put the actor in jeopardy add warnings
            Make AI listen to warnings and adjust utility accordingly
        Explicit utility function rather than a basic decision tree
    
    On the horizon:
        Enemies with multiple weapons
        
        Brainstorming:
            special actions (shove, trip, disarm*, jump, kick)
            bring back weapon specific special abilities/effects
            random chance condition procs
            crits and crit fails
            crit associated stunts (ripostes, shoves, kicks, cleaves, trickshots, etc)
            crit failure associated consequences (friendly fire, weapon degradation*, lose a turn, trip and fall, etc)
            specific enemy awareness based advantages* (one PC can be hidden from one enemy and get a bonus)
            enemies with multiattacks (maybe preferring to hit multiple targets)
            area of effect attacks!!!(/other attacks that just hit squares)
            enemy factions IE enemies who fight each other
            dynamic enemy relations (zombies die when necromancer dies, dogs run wild when houndmaster dies, etc)
            enemy special properties (undead need to be deathblowed, vampires heal themselves on hit, ghosts make you weak, etc)
            enemy morale and fleeing behaviors (also may tie in to dynamic enemy relations IE brutal boss kills fleeing enemies)

        Alpha 0.4
        Stealth, enemy character tracking, idle activity, and sound!!


    Not to self! traits and conditions overhaul soon pls!

    Done with hypothetical moves and hazards. Did it much more elegantly than hypothetical attacks.
    If I get the chance, I'd like to give attacks the same treatment.
    I just moved some calculations into the constructor so that any time you create a move, it calculates hazards.
    If attacks generated all the necessary characteristics just from being created as an action, it would save some typing.

    Added a utility function. It is very simple right now, but it works!
    Mostly enemies are just following a simple decision tree. Look for the fewest hazards,
    of the nodes that tie on that front, look for the best damage potential,
    of the nodes that tie on both fronts, pick the node in the graph that puts you in the most desirable position.
    Right now desirable position just means at your max range from the nearest player character.

    In the future, I may rework it to make enemies group up vs spreading up,
    or try to take on one player character at a time,
    or do other clever things like that.

    the other two things I had on the agenda for today were optimizing the ai algorithm, fleshing out temperments, 
    and adding bresenham lines.
    honestly I'm not sure how much it actually needs to be optimized at the moment. It's actually doing great.
    bresenham lines also feel like they wouldn't be worth the trouble right now
    I don't think enemy movements look weird at the moment anyway. They honestly look fine especially for monsters.

    So the only thing left that I still might work on is fleshing out temperment.
    Honestly I think I might save that though. I don't think I have enough enemy types to really care that much about it atm.

    I'll take another look at fleshing out temperments tomorrow.

    Today's accomplishments:
        - Fleshed out move and attack actions to take into account attacks of opportunity
        - Created UI warnings for when player characters are about to provoke Reactions
        - Created utility functions for smarter enemy AI
        - Checked performance of game by having many enemies take basically instant turns, and it was all good news.
        - Fixed a bunch of stuff that broke when I added warnings to actions
        - Added extra text to explain modifier breakdowns
    
    What's could be on the docket tomorrow:
        - Take another look at fleshing out temperments
            Just see if there is any low-hanging fruit here.
            Adding a javelin goblin who runs in, throws, and runs away could be cool.
            (such a character would probably want to be at a range of Max-range + 1/2 move distance)
            Maybe also just add measures for pack vs lone wolf, berserker vs tactical, timid vs bold, etc

        - Take inventory of combat features.
            If there are more combat features I want to add, it might be nice to lay them out now.
            AI is taking shape now so it would be nice to know all of the features that I eventually want them to have
            I have a list of brainstormed features from earlier so I won't reiterate them here,
            but it would be nice to choose a few of those to add before I build too much on top of the existing combat system

        - Get ready to finish up Alpha 0.3 and start on Alpha 0.4 BABY!!!

        - Getting ready to finish up Alpha 0.3
            Get a stable 0.3 build together for playtesting sans incomplete features like sound
            Check for bugs and problems
            Make other minor tweaks

        - Getting ready to start on Alpha 0.4
            Pseudocode for enemy tracking system
            Pseudocode for new state system to support surprise, searching behavior, and fleeing
            Plan out beginnings of sound system

6/28/24
    Turns out I think I have strep.
    Might be a slow couple of days while I veg out around the house, but who knows.
    Maybe I'll be able to work through the brain frog.

    Today I spent a while tracking down a lighting bug.
    I then tweaked some proc gen parameters just to see if I could make something cool for the playtest build.
    Didn't really get much out of it because my room accretion algorithm is actually the worst thing to grace god's green earth.
    It's impossible to work with, and I await with bated breath the day I can relegate it to the dustbin of my computer's harddrive.

    Goals for today:
        - feel better
        - think about how to finish up Alpha 0.3 and get started on 0.4
        - clean some things up
            the UI elements popping up for offscreen enemies needs to stop
    
    Goals for tomorrow:
        - feel better pt.2
        - 

    Note on optimization:
        It occurred to me today that my system of using the settimeout function is probably not optimal.
        Right now I run a function like enemytick, and then check at the end if we should run it again.
        If we should run it again, we wait for a minute, and then run it.
        This means that we don't take into account how long it took for the enemytick function to run when deciding how long to wait.
        I assume this can make for inconsistent wait times.

6/29/24
    Yesterday I ended up passing out so very early.
    Not a lot got done yesterday, but I tracked down some bugs.
    UI elements related to enemies no longer show up if the enemy isn't visible.
    Optimized my enemy AI function just a tiny bit.

    Today I want to finish my Alpha 0.3 build.
    Maybe add a few new enemy types.
    Maybe adjust the enemy AI algorithm.

    After I've polished it up a little, I'll get ready to send it out for playtesting.
    I bet Mike, Peter, and Chris would play it. If I asked, I'm sure Rich would too.

    With a bit of tweaking I did to my primitive proc-gen, I think I'm going to call my Alpha 0.3 playtest build done!

    Alpha 0.4 is next!
    that's stealth, sound, and awareness!

    after that is real sound!

    after that is objects overhaul

    after that is items and inventories

    after that is player character overhaul

    after that I work on the proc-gen for encounters and dungeons and then Alpha 1.0 will be done

6/30/24
    Things to do today:
    - Export Alpha 0.3 build - Done!
    - Start planning Alpha 0.4
        enemy awareness
        stealth
        suspicion
        fleeing
        sound (functional)

    Enemy awareness Pseudocode
        Create enemy extension of character class
        Give enemies a list of known friendlies and a list of known enemies (start with just enemies)
        Once they see a character, add them to one of the lists
        Associated with each character is a location (last seen, heard from, or heard about from another enemy)

        Starting with just visuals
            Once an enemy spots a player character, they become aware of just that player character.
            If they spot a new player character in the middle of their turn, clear their action queue, and replan the turn.
            If an enemy cannot see any player characters, enter search mode -> try to get to the tile you last saw them on.
            If you can see another enemy who has seen a player character more recently, update your awareness with their awareness
                This should maybe be on a timer or happen with some random chance so that it doesn't propogate that quickly
                Maybe a random chance depending on how close the enemies are to each other
                Maybe enemies actively have to talk during their turn to share player location info, also creating a sound queue
            If you are in search mode, but have already checked all the last seen player locations, start patrolling/hunting behavior?
        
        Adding on functional sound queues
            Actions should have sounds associated with them
            When a sound is generated, it should check if there are characters nearby who can hear them
            If there are characters nearby who can hear them, call a method on the character
                I should rework visual awareness to work this way too
                Calling a method on the character will make a lot more sense than using the traits/conditions system
            Enemies who are idle should need a sound to be loud/obvious
            Enemies who are already suspicious should start investigating if they hear anything at all

            Some attacks should be louder than others (Sneak attack quieter than longbow quieter than longsword)
                This could also mean that characters could have multiple attacks at varying volumes
                Similar to the way that heavy armor gives disadv to stealth checks in 5e, heavy weapons could be louder
            Some moves should be quieter than others (Dashing should be louder than just walking)

            Sounds should propogate more in open space than through walls or doors

        New state tracking
            - idle
                idle enemies might be asleep, or distracted (eating, talking, etc)
                they might be doing some task like patrolling, keeping watch, or manning a barricade
            - suspicious
                suspicious enemies will wake up or cease their distracting activity
                if they pass a certain threshhold they will begin hunting
            - hostile
                hostile enemies seek to kill their opponents
            - hunting
                hunting enemies will travel around the map in search of enemies
                their utility function should be based on exploring (IE seeing new tiles)
                I guess this means enemies will also need a list of the tiles they have seen recently which seems like a lot
                if I do implement this system, then hunting enemies could also tell other enemies about tiles they have recently seen
                this would make it possible for enemies to form hunting parties of a kind, and they would naturally spread out
            - fleeing

7/1/24
    Yesterday I ended up in the ER. Turns out I have strep and also mono so that's fun
    Not the most productive day.
    Back at it today though. I've been playtesting without doors which is cool.
    I also fixed UI labels and animations so, in general, they show up when they're supposed to and don't when they're not.

    I've been trying different variations of doors/no doors/curtains.
    I modified curtains so that enemies can see through them, but light can't get through.
    That basically made it like what it will be like when enemies can hear you coming.
    I will go back to either curtains that nobody can see through or doors eventually,
    but I like

    Today, I think since briefly playtesting, I may export an Alpha 0.31 build for playtesting by others.
    I'm trying to figure out if there's anything else I want to adjust before I go ahead and start on new features.
    If I start on new features, usually that breaks things. If one thing is broken,
    I'd need to fix it before making changes to a playtest build.
    Maybe I'll just work on pseudocode for Alpha 0.4, and then I'll start on it after I've done more playtesting.
    I'm gonna send out a few texts right now to ask for playtesters

    I have worked on a bunch of little things today:
    - added light levels and fixed attacks and light sensitivity to be based on them
    - fixed some more problems with UI vs animations not showing up properly
    - added very basic destructability of objects
    - minor ui tweaks so that you can see many actions/how much move hypothetical actions will take
    - additional ui tweaks so that difficult terrain is highlighted in red
    - fixed enemy dark attack not actually giving the advantage it said it would
    - added an experimental reverse dash feature called stand ground which trades move for an extra attack

    More pseudocode for stealth and awareness arc:
        Enemy states:
            idle
            suspicious
            hunting
            hostile
            fleeing
        It would be cool to work on my utility function system and flesh it out such that
        state changes could just change nothing but the utility function.
        in principle that should be able to do anything. I don't know if it's a good idea, but it seems worth a shot.
    
        what does the utility function already take into account
            distance from the nearest hostile relative to max range
            damage potential
            hazards
        
        what could a utility function take into account?
            suspicious tiles explored
            total tiles explored
            information shared
            maximizing distance from hostiles/ last place hostiles were seen
        
        I should also rework the turn planning algorithm in a few ways
            Only search through potential final nodes when comparing nodes
            
7/2/24
    Still working on Alpha 0.3 playtest build. I haven't had anybody else touch it yet,
    but I've been going through and finding little nitpicks to fix. it's probably at 0.32 by now.
    I messed with lighting a little bit today, but most reverted changes.
    I want to eventually reach a point where the sightmap is never effected by flickering.
    I would like light level to be the only determinant of visibility, but I need to tweak some other stuff first.
    It would be nice though because it's perfectly deterministic, and then I can keep my current visual noise system.

    I think I want to export my Alpha 0.3.2 build and do some more thinking about 0.4 features.
    Maybe start prototyping 0.4 features at some point today. That would be sick.

    I also want to figure out where the infinite loops in my enemy AI system are.
    If there aren't infinite loops in it, and it's just too explosively complex, then I'd like to simplify.
    Eventually it would be sick to be able to just rely on swapping out utility functions to change enemy behavior.
    Enemies could even gradually shift from one to the other.
    That would be cool if enemies showed signs of fear like switching to defensive behavior before outright fleeing.
    At the same time, if the effects are too subtle, then a gradual shift wouldn't even be noticeable so I'd have to experiment.

    I also want to overhaul my turn handling system. It's super messy and cludgy.

    So I'm a good number of hours into working on the game today, and I have made quite a bit of progress.
    I kinda got on a roll and optimized the hell out of the enemy turn planning function.
    It started to look like it was going to be super efficient, and that gave me hope.
    If I can make it extremely cheap to run, then I can just use the same algorithm for all enemy behavior,
    and if offscreen behavior can be determined with the same algorithm as onscreen behavior,
    then my idling, searching, hunting, and suspicious states can be pretty much as complex as I want them to be.

    That'll make it so that enemies can chase you across the whole map,
    and wandering monsters wouldn't have to be spawned in, they could just be wandering.

    I also, after realizing the freedom that this new algorithm's efficiency has bought me,
    just added in multiple enemy weapons. Love that.

    I've been experimenting with idle activity for a minute now. I realized my algorithm isn't quite as fast as I thought.
    I wasn't generating dungeons as big as I thought I was so I was testing with only something like a hundred enemies before.
    Once I bumped that up to the four hundred or so range, I did notice a little stuttering.
    I do think my general idea is totally gonna work though.
    Basically an entire map's worth of enemies should be able to take their turns no problem.
    I think this is something of an achievement. I think if I come up with some clever utility functions for idle creatures,
    they'll take no time at all to run. I've just tuned all of my pruning so far on combat.

    Now that I have a general idea of what idle behavior may look like, tomorrow I should start testing enemy awareness.
    I should rewrite the enemy turn planner so that they only take into account PCs they've seen.
    I want to eventually allow enemies to share info with each other as well.
    Then fleeing behavior would be an easy next step: 
        just come up with a fleeing utility function
        and let fleeing enemies tell far away enemies the wearabouts of the PCs

7/3/24
    I just did a little playtesting/tweaking and went ahead and exported an Alpha 0.32 build.
    Now that I have a general idea of what enemy idle behavior might look like,
    I would like to start on enemy awareness soon.

    Notes:
        - check on tick counter. It's probably mostly obsolete.

    Playtest session w/ Peter
        Maybe switch weapons in the Aim attack screen
        Turn order indicator
        Hot key glossary

    New enemy state system:
        combine utility function and temperments - done
        utility function should be pulled from the character, not hard-coded into the turn planner
        enemies should have an array of possible states with corresponding utility functions
        utility functions should be able to de-facto rule out certain possible moves by tanking their utility
        IE fleeing enemies should rarely ever attack. Damage potential should be a very low priority
    
    Summary of changes and additions to the enemy class
        Enemies keep track of characters they've seen, where, and when (array)
        Enemies keep track of tiles they have seen and when (array)
        Enemies have a list of possible states (not sure)
        Enemies have a list of utility functions corresponding to their possible states (not sure)
        Enemies need a way of triggering changes from one state to another (no longer use traits/conditions)
            Oooooooooohhh. It's possible that some state changes could actually just be actions.
            I've been wanting to get reactions out of the traits and conditions system for a while-
            so I could just do that, and then make it so that enemies change states using actions/reactions.
            update traits/conditions and check for reactions should probably just be character methods anyway.
            Some state changes could be reactions, and then some could just be actions.
            IE conditional upon the battlefield looking a certain way, change state to fleeing etc
        Enemies also need a way of keeping track of tiles of interest/suspicion so that they can follow up on sound queues

        Ideally: Enemies have a list of actions they can take with details about when to try them
            Default attack would have a conditional (if I can see a hostile from a square, and am in range)
            then would describe exactly how to add a corresponding node to the nodemap (cleaning up the turn planner)
            this way I could add in things like special abilities that come with opportunity costs etc
            somnething like: don't throw your only grenade until you can hit multiple targets with it at once

    Where I'm trying to get:
        Enemies engage in idle behavior.
        They become suspicious if they hear the player characters coming preventing them from being surprised.
        If their suspicion is piqued enough, they will go to investigate.
        Enemies will update other nearby enemies about player characters.
        Some enemies will flee from combat, informing other enemies of the player characters as they go.
        If the player characters run from enemies, they will chase after the last place they saw them.
        If they don't find the player characters there, they will start scouring the map for them.
        During combat, enemies may have a range of special abilities they can use under certain circumstances.

    After enemy awareness, stealth, and visual sound queues
        Actual sound 1-3 weeks
        Objects overhaul 1-3 weeks
        Items and inventories 1-3 weeks
        Player character overhaul 1-3 weeks
        Encounter/room generating algorithm(s) 1-3 weeks
        Area generating algorithm(s) 1-3 weeks

7/4/24
    Playtesting session with Peter yesterday went well. Gonna do more of that with Mike and with Chris.
    Maybe rope a few other people into it as well.

    But I want to go ahead and jump into new features ASAP

    I did just add a hotkey glossary. I think I'm gonna wait on turn order indication/revamping aim attack screen.
    Possibilities for those would include a bottom of screen indicator for turn order.
    Aim attack could plan moves to get into position as well, and could become a kind of all purpose details screen.
        This could mean you could use it to view details about hazards even when not making attacks or something like that.
        The aim attack screen could also display what weapon you are wielding and allow you to switch without leaving the screen.
    
    All of that falls under the umbrella of a UI overhaul

    Here is a laundry list of things to overhaul that aren't currently on my roadmap
        UI overhaul
        traits/conditions overhaul

    I'm sure there are more.

    Anyway. New features today!
        Making the enemy class more robust
        Simplifying the character class so that more of its nuances live in other classes that inherit only generic components.
        Maybe come up with a base "entity class" under the assumption that objects and items might need to share some generic functions
        ...maybe
        Make enemies keep track of actions
        Make enemies keep track of characters
        Make enemies keep track of tiles
        Make enemies keep track of state
        Make enemies have unique utility functions corresponding to their state
        Give enemies state changing behaviors allowing them to switch from idle->suspcicious->hostile->hunting->fleeing etc
        Give enemies lists of actions/when to try them/how to score them
            This will allow me to add in special abilities to enemies without having to touch the turn planner
        

    Beta content planning:
        4 main areas each with an associated secret/optional sub-area
        each area has 3 special challenges, 1 at its heart, 1 at its exit, and 1 in its secret sub-area
        each area has 
            at least 3 common enemy types, 
            at least 2 uncommon enemy types, 
            at last 1 boss enemy type,
            at least 2 enemy types of ambiguous affiliation (hostile to everyone, neutral to everyone, etc)
            at least 2 connections to other areas,
            at least 1 contested region between areas where the locals might interact with outsiders

        Caverns
        Drowned Temple
        Catacombs
        Scourge Hive
        Mushroom Forest
        Mists of Madness
        Black Beach
        Abandoned Military Outpost
        Slaver Encampment
        Underground Tide Pools
        Ruined City

        Caverns
            special areas:
            special challenges:
            common enemies:
            uncommon enemies:
            special enemies:
            region connections:
            borderlands:
        Ruins
        Black Beach
        Ruined City

7/5/24
    What I did yesterday:
        - Hotkey glossary
        - Reworked states
        - Reworked enemy AI algorithm to take in modular actions/action usecases/utility functions/temperments
        - Moved reactions out of traits/conditions for enemies
    
    What's on the docket today:
        - Finish simple enemy state system (recreate what I had before with new modular system)
        - Implement smart enemy awareness (enemies should track tiles and characters and the knowledge they have of them)
        - Implement hunting state
        - Implement basic sound queues
        - Implement suspicion
        - Implement fleeing
        - Implement information sharing
        - Finish new reaction system for enemies

    On the horizon
        - Polish sound queues and make applicable to player characters
        - Complete hunting, suspicous, fleeing, and idle states (idle states will still need overhaul after proc-gen overhaul)
        - Complete information sharing
        - Apply new reaction system to player characters (part of traits and conditions overhaul)
        - Finalize enemy internal mood(?) tracking IE (fear, morale, suspicion, rage, etc)
        - Work on stealthy enemies (utility function that takes into account sound queues, light levels, and line of sight)

    Enemy reactions:
        Become hostile when spot player character
        Become suspicious when hear player character
        Become fearful when witnessing ally deaths
        Make attack of opportunity when applicable
        Make overwatch attack when applicable
    None of these are state dependent. I actually can't think of a reaction that is state dependent.
    With the minor exception that reactions that cause state changes need know at some point what state we are already in.


7/6/24
    Yesterday I ended up banging my head against a wall for a while on reworking enemy LOS/reactions.
    Today I think I want to just continue banging my head against the same wall for a while.
    I want to create a robust enough system that I won't have to rework it every time I add new features.
    I also want to make it fast enough that I don't have to throttle the simulations I do for offscreen enemies.

7/8/24
    Yesterday I wrote up the enemy hunting utility function. I just fixed the Djikstra map part of it so now it basically works.

7/9/24
    I ended up changing how the hunting/hostile states worked yesterday.
    I realized that it wouldn't do for enemies to go into a different state every time they lose sight of an enemy.
    I decided that the hostile state should apply at least until the enemy sees the tile they last saw their adversary empty.
    I think I want to change it even further so that the enemy updates their last known position of their adversary one extra time.
    This way when a player character walks out of view, the enemy will still consider them to be a known element.
    They will just track them by their last known tile which will be just out of view.
    I think this will work especially well with things like doorways where the enemy will have to go all the way through.
    Only from the other side will they see that their target has gone further away.
    It occurs to me now that it should already work this way, and I'll need to do some testing to check on it.

7/10/24
    I have been pretty disorganized recently because I've been diving head first into reworking a bunch of things.
    I've been breaking things and fixing them on repeat for a bit.
    I am pretty deep into Alpha 0.4 features though!
    
    Alpha 0.4 roadmap:

        Nitpick
            Rework spot reaction to be caused by flood fill/raycast from action position
                rather than updating visibletiles
            Come back and perfect LOS algorithm based on a shadowcasting system
            Come back and perfect 

        Done:
        - Enemies have awareness of individual opponents
        - Enemies assume their opponents are at the last place they saw them when they lose LOS

        Up next:
        - Enemy hunting state in which they explore as many tiles as possible in search of enemies
            Enemies should be able to have multiple queued search tasks that have stacking utility
            Each search task should grant utility when moving to tiles that give them line of sight on more tiles
            Enemies should know the layout of the region and be able to leverage that to perform efficient searches
        - Enemy information sharing
            Enemies should randomly on their turns verbally update nearby allies on:
                - Last seen positions of opponents
                - Tiles explored/ruled out in searches for opponents
        - Sound queues
            Actions should have associated sounds
            When a sound is generated, it should reverberate through nearby tiles (modified flood fill)
            This shouldn't be too compute costly because action frequency is strictly limited
            When a sound reaches a character, it calls a hear reaction(?)
        - Fleshing out enemy states
            Suspicion should insulate enemies from surprise and eventually lead to enemies investigating
            Fleeing should occur when morale is low and should lead to reinforcements coming in (information sharing)
            Idle activities fleshed out to make surprise more consequential
                Catching enemies asleep
                Catching enemies in disadvantageous positions
                Catching enemies out of formation/one at a time
                Once items and inventories is done, come back and allow you to catch enemies unarmed

Playtest with Chris:
    Hotkeys glossary
    Max HP
    Turn order indicator
    Memory tiles?
    Indicate the torchbearer visually
    Tileset option and/or wolfenstein cam
    Switch weapons in Aim mode
    Corpses

    Turn order questions!

    We like the stand ground
    We like the skulker
    We like the evocative vibe

    Nitpicks
        - Lore

    Chris' writeup:
        Make controls visible in-game
        Show max health (e.g. 6/10)
        Visible turn order
        Shared fog of war between all characters
        Area Of Effect attacks
        Allow weapon toggling while aiming attack
        A class with multiple attacks
        A class with A.O.E.
        Add a save/load system
        Loot system
        ADD SOME SICK LORE PLEASE
        Interesting that you have to keep the Deserter alive
        Friendly NPCs?
    

    Could change turn order to be able to choose when your party members go
        (this would mean enemies would probably still go all at once)
    Could change turn order to include enemy turns between player turns

7/12/24
    Yesterday I added the basics of sound queues.
    Enemies can now become aware of you based on actions you take,
    and actions have varying levels of loudness.

    Today I want to finish up work on revamped enemy states.
    I want to add a proper hunting state.
    I want to add suspicion/investigating.
    I want to add fleeing.
    I want to add enemy information sharing.

    After that, Alpha 0.4 will be mostly done.
    Once enemy awareness, information sharing, and dynamic state changes are implemented,
    I will have a simple de-facto stealth system.
    I can add a degree of random chance to enemies spotting player characters as well.
    This opens the door to doing things that increase chances of being missed.
    This means that there might be actions that you could take to keep one character hidden,
    and if I implement an attack bonus based on being unknown to the enemy, new strategies should emerge

    Another thing I want to hit today is making the actions that enemies entertain state-dependent.
    This way I can add a new action like chatting that is only considered while idle,
    and a new action like sharing information that is only considered while hunting or suspicious.
    
    Pick up where you left off on hunting state! Modified Djikstra map that reduces utility of seen tiles.
    Can do this two different ways:
        - Make moving through them costly on the Djikstra map (IE assume the pc was unlikely to go that way)
        - Make moving to those tiles low utility in the turn planner (assume the player character wanted to get far away...
        but have a personal preference for looking for the player character on tiles you've never seen before)

7/13/24
    To do list for today:
        finish hunting AI
        create fleeing AI
        create morale scale/morale checker
        add sound queue tags for combat, suspicious, chatting, screaming, etc
        add information sharing during enemy turns as part of chatting action

    On the horizon
        clean up and export playtest build for Alpha 0.4
            figure out closed source or closed-ish source (dump all code into one massive file and do something to nonsensify)
            iron out quick fixes/bugs
            take another look at proc-gen to see if I can add any bells or whistles to my current bare-bones generation
            start playtesting:
                Chris
                Peter
                Mike?
                Rich?

    Alpha 0.5
        Full sound!!
        ambience:
            start with just a kind of wind sound
            add a crackle of fire for the torchbearer
        sound fx:
            footstep
            slash attack
            piercing attack
            bow & arrow
            player character/monster reaction sounds? (grunts/screams)
            monster chatter sounds? (squawks and such)
            destruction of objects
            explosions?
        minimal music?
            little synth hits for different characters on screen
            a mood tracker that adds instruments based on nearby enemies
                maybe more percussive elements slowly get introduced as more enemies are on screen
                skulkers at high pitched string-sounding things
                ogres add deep sub-bass
                etc
            area determines the general tone?

7/14/24
    I think I'm gonna call my first draft of the hunting state done. I'll come back to it at some point
    Now I have an idle state, a hostile state, and a hunting state.
    The hostile state is the only one that is more than a placeholder unfortunately,
    but I'm hoping the others will be easier to finish up later. Maybe it will make more sense after proc-gen is overhauled.

    I think now that I have returned from my prototyping, I actually think sound, hostility, and hunting seem to work.
    Most of it is pretty opaque to the player with only little hints so even though everything is pretty rough,
    I still think its easy to suspend disbelief.
    The fact that you could conceivably run away from an enemy, hide in a small alcove, and hear him walk past,
    knowing he's looking for you, makes me think that there's something here.

    Something I just came up with is the possibility of ambushes. Some enemies, when they hear you coming, should overwatch.
    This means that if there are enemies in the next room who have heard you coming, it could be a kind of trap.

7/15/24
    Yesterday I ended up going over to Mike's and he playtested my game for maybe an hour or so?
    I think it's been a good sign that everybody who has playtested so far has played for quite some time.

    These were the notes I got from that playtest session
        Playtest with Mike (Alpha 0.4 7/14/24):
            Zoom in and out
            Fix autodash
            Accentuate ranged animation (fix animations)
            Be able to overwatch from aim screen
            Make stunned icon different from surprised icon
            Make conditions visible again (right click screen/alt)
    
    That was the first playtest session since the addition of 0.4 features.

    Another thing that I didn't write down before is that Mike really liked the visual sound queues.
    He also turned on some cave ambience sounds from youtube, and they were really fitting.
    I think that bodes well for the near future if some really simple ambient sounds already make it come to life.

    It just now occurred to me that I have never once considered adding multiplayer to my game.
    It seems like it might be a real headache to set up and not necessarily a first priority,
    but I'm surprised that it never occurred to me before.
    It seems like the possibility should have come up somewhere in all my musings.

    Today I added a way to zoom in and out, and a way to pan around the viewport.
    I also fixed a bunch of problems with enemy state changes that were resulting in double surprises or no surprises.
    Fixing enemy state changes should also make enemies more reliably investigate noises.

    I also just fixed animation durations!

    Alpha 0.4.1
        Zoom in and out added
        Pan via arrow keys added
        Fixed bugs relating to enemy state changes
        Fixed bugs relating to animation durations

    After I'm done with fleeing and information sharing, I think I will be ready to work on something other than enemy behavior
    I'll come back to enemy behavior once I have more things for them to do.
    Once environments have more to do in them, I'll flesh out enemies' ability to actually do those things.
    For now, once I am done with these last few features, I'll jump headlong into full sound!
    Once I've got full sound, I'll do objects, then items, then player characters, then proc-gen.
    sometimes between alpha 0.5 and alpha 1.0 is when I'm thinking of trying to get some open testing going.
    It would be sick to get my game into the hands of lots of people and just see what they have to say about the experience.


    What to do tomorrow:
        Fleeing state
        Enemy information sharing

7/16/24
    What's on the docket today?
        Fleeing state
        Enemy information sharing
        Export Alpha 0.4.2 build
        Playtest for bugs

    What did I do today?
        Added an enemy fleeing state
            Fleeing enemies want to get away from you, but if they are cornered, will fight instead.
    
    I just had an idea for discouraging backtracking and staying in one place too long.
    I think that corpses should attract the attention of enemies.
    They could just turn more enemies in the area suspicious/hostile/hunting which could be bad,
    but they could also attract some kind of carrion creature that just follows the trail of corpses.
    These creatures could eventually be quite a nuisance, and if normal enemies could eventually be made to drop loot,
    having something attack you that doesn't drop anything upon death could be just a straightforward hindrance.

    I think I should standardize the unit of utility.
    I think one util should be equal to an average of one damage against a hypothetical enemy with ac10
    Meaning if you do between 1-4(average 2.5) damage and have no bonuses to hit (hit chance 0.5),
    that attack should net you a utility of 1.25.

    How should we think of positioning? Well getting into a good position should be as valuable as:
        the attack that we are assuming it will enable use
        minus a discount rate because we won't get to use it until next turn.
    Being at ideal range for an attack should net us maybe half the utility of an attack.
    Being one turn's worth of move away from ideal range should be worth some fraction of that.

    How should we think of risks?
        Taking a hit from an enemy could kill us
        Not dying should generally be priority number 1.
        Risks could be evaluated based on enemy HP though.
        Maybe assume all enemy attacks do a flat 3 or 5 damage,
        and if we have the health to tank it, it's not so bad, but if we don't it's a huge risk.
    
7/17/24
    Playtested for bugs today. Fixed overwatch attacks not making sound.
    Migrated overwatch into new reaction system.
    Made enemies flee when they reach too low health.

    What's on the docket tomorrow?
        Alpha 0.4 inventory:
            Sounds, enemy awareness, fleeing, information sharing, and idle behavior.
        Everything is working, but in a pretty minimal state.
        Tweak a few things. Export some less buggy playtest builds, and get ready to start work on Alpha 0.5

7/18/24
    What's on the docket today?
        Alpha 0.4 inventory:
            sounds
                sounds look for characters who can hear them
                actions have loudness
                sounds have minimal content
            enemy awareness
                enemies have characters they are aware of
                when they lose sight of them, they assume they are where they last saw them
                when they see where they thought the character was, they realize they've lost them
                when they lose all their known enemies, they go into hunting mode
                when hunting, they looking for the character that they lost sight of the shortest time ago and closest to them
                when they start hunting, they assume the character ran from the last seen location, and start exploring.
            fleeing
                when enemies flee, they generate a djikstra map that weight squares based on how far they are from adversaries
                they then run along the djikstra map trying to get as far away as possible
                when cornered they will still fight
            information sharing
                when fleeing, once they are far enough away, they will begin shouting
                when other enemies hear the shout, they receive information about the character's last seen locations
            idle behavior
                idle enemies randomly walk around and chat

    Where would I like these features to be eventually?
        sounds (Alpha 0.5)
            full actual sound. (Next version)
            honestly not much else

        enemy awareness (Alpha 0.9)
            enemies should maybe have a general idea where hostiles are even if they lose track of them (eventually. Not urgent)
            enemies should also eventually have suspicion levels rather than immediately jumping to hostile

        fleeing (Alpha 0.9)
            enemies should have a morale system that governs their likelihood of fleeing

        information sharing (Alpha 0.9)
            enemies should be able to share information in other states that fleeing
            during combat would be cool ie ("He's over there")

        idle behavior (biggest growth area) (Alpha 0.9)
            enemies should spawn with varying idle preoccupations
            some should be sleeping
            some should be engaging in recreation or idling
            and some should be in defensive positions or patrolling

    I'm going to adjust the default hostile behavior to make enemies avoid getting closer than their min-range like the plague.

    What I've done so far
        Moved overwatch into reactions
        This fixed overwatch attacks not making sound
        Made ranged enemies strongly dislike standing within their minimum range of an enemy
        Fixed a bug that caused enemies to update all their known character locations to the last character who moved
        Adjusted mouseover to no longer call for frame updates (eventually framerate should be stabilized completely)
        
    Other housekeeping and cleanup? (pre playtest build)

7/19/24
    Just exported a closed-source version of Alpha 0.4
    I also have an open source version that should be identical.
    I'm gonna be playtesting it soon hopefully.

    Today I should go ahead and start on 0.5 though.

    How should I do this?
        Start with cave ambience
            This part should be relatively straightforward
        Move on to footsteps
        Then attack sounds
        Weapon switch
        Chat/Alert sounds?
        Dynamic ambience/music
        Dynamic reverb and echoes?

7/20/24
    I am just beginning the process of adding sound.
    I'm getting the sense that this could be a really deep rabbit hole.
    I'm thinking I'm going to give myself until Monday the 29th to create the entire sound system.
    I think if I do it any other way, I'm either going to put it off forever or spend forever tweaking it.
    It needs a deadline so that I will do it first and do it decisively.

    Currently the plan is to figure out a way to create a single audio context that contains all the sounds in play.
    I want to add and subtract elements dynamically to create ambience and tone.
    I also want to have discrete sounds come in when you or enemies perform actions.
    After that I want to leave sound alone for a while.

    I've been thinking about proc-gen a lot recently.
    I'm trying to think of way to make something interesting come out of it.
    I have been thinking about how I could go about creating some kind of maximization algorithm.
    I want to create some system of scoring how good a room is, and then make random adjustments, and see if they improve the score.

    I could generate a kind of hot-path through the rooms or areas (IE the path the player is likely to take)
    and then come up with a utility function based on it.

    How much of a challenge will they face?
        IE how many enemies are near the hot-path, and how well positioned are they?
    How many interesting opportunities will they encounter?
        How many times will they have the chance to get the drop on their enemies or use the environment to their advantage?
    How much of an interesting story will they encounter?
        How many distinct elements of the environment will the player encounter?
    
    I could create a really compute-costly algorithm at first, and then just employ a bunch of pruning to scale it up.

    Maybe something like this:
        Create a military outpost that satisfies the needs of a group of long-gone humans
            Depending on the level of abstraction, this could be a literal agent simulation
            or this could be a dart thrown into a vast possibility space and then guided by the slope of the fitness landscape
        Simulate the dramatic downfall of the outpost (Walls destroyed. Underground rooms sealed beneath rubble. Doors smashed)
            This could also be an agent based simulation where invaders break through consequential walls to get to a goal
        Simulate the aging of the ruins (flooding, flora and fauna moving in)
        Simulate new inhabitants squatting there (digging of goblin dens, nests, etc)
        Simulate hypothetical attackers who try to get in, that the goblins must defend against so they know how.
            This would tell the goblins where to put the battlements, and where to hide their treasures.
            
7/22/24
    Yesterday I worked on sound for quite a while. I banged my head against the proverbial wall for pretty much all of it.

    I can't seem to figure out a way to make a reasonable sound environment.
    I want to rethink how I do this.

    I want to write some kind of general purpose sound-manager code.
        I want it to handle independant effects chains
        I want it to handle total volume control
        I want it to handle playing many sounds at once without any distortion
        I want it to handle playing sounds from different kinds of sources (in-game sounds, UI sounds)
        I want it to handle playing sounds ambiently/with indefinite durations
    
    I also want to think more about how I want to go about creating my little library of sounds
        I want a list of envelopes that have durations included
            These will be things like punch, crack, swell, boom, etc
        I want a list of tones as well
            Lowsine, medlowsine, medsine, lownoise, medlownoise, medlownoise
        I want a list of sound-specific effects
            Volume modulation with different grain sizes to produce rustle/crackle effects (maybe also just use multiple envs)
            Pitch modulation to produce movement, etc
            
        I want a list of environmental effects
            delay, reverb, lowpass filter

7/23/24
    Today I want to continue working on audio
    I think I want to create that synth today. I want to create a dedicated sound editor.
    Once I've created that, I want to create a new sound handler.
    I feel like I know a little bit better what I want so I think it will be a little easier this time.

7/24/24
    I still didn't do what I said I was going to, but I started on it sort of.

    Today I shall do it in earnest though. I am going to create a synth environment where I can create sounds.
    I want a sound effect generation workflow and an ambient sound generation workflow.

    I want to be able to pick a number of sound generators (mostly sinewaves and noise generators)
    I want to be able to apply custom envelopes to them.
    I want to be able to modulate their pitch with a similar function as my envelope function.
    I want to be able to add delay and reverb to them.

    I also want to be able to combine them into individual buffers so that I can apply effects to them as a whole.
        Example: I might want to apply a convolution to both a sinewave and a noise generator so that I can smooth it all out.
    
    How I do I want my environment to work.
    I don't mind having to use the console for some functions.
    Maybe the first thing to do is just write a system that allows me to generate sounds easily from the console.

7/25/24
    Playtest notes:
        Check Skulker's darkattack
        Fix objects staying difficult terrain after being destroyed
        Fix enemies not being stunned right away
        Aim attack screen needs to go away if you don't have an action

7/26/24
    I had another playtest session with Peter yesterday. That went well

    Today I am going to continue work on sound desgin.
    Big to do list:
        Code:
            Ambient sound handlers
            Debug sounds piling on top of eachother - Done

        Sounds:
            Basic footstep sound
            Basic ranged attack sound
            Basic melee attack sound
            Basic hit sound
            Basic chat sound
            Basic alert sound
            Basic surprise sound

    So much done today.

    I implemented ambient sounds
    I added chat sounds
    I added alert sounds
    I added attack and miss sounds
    I improved my footstep sounds
    I fixed whole bunch of broken shit

    Alpha 0.5 is actually getting there.
    I am torn between doing another week of work on sound vs doing it in 1 week like I had planned

7/27/24
    Today I am looking at what I implemented yesterday, and it was quite a bit.

    It's strange how done the sound feels after just doing maybe a quarter or less of what I had planned.

    The whole system is set up though so if I want to add all the content I planned I still can,
    but it feels like it might be better to save that for later in beta when I'm doing polishing.
    I think that it might be nice to get to objects/items/pc overhaul/and Alpha 1.0 proc-gen

    Alpha 1.0 is just on the horizon now. A few more weeks most likely.
    I think my last few weeks will be spent working on proc-gen mostly.
    After that, I think it will be time to create a closed-source build and send it out for maybe open testing?
    Something like that.

    Minimum features for Alpha 1.0 (minimum viable product)
        Dynamic lighting system with ascii graphics - Done
        Tactical turn-based combat with a small party of player characters - Done
        Basic enemy AI allowing for idle behavior, tactical combat decisions, fleeing, and searching - Done
        Dynamically generated sound effects and ambient music - In progress
        Interactable objects and collectable weapons
        4 procedurally generated regions/biomes with unique enemies and items
            (Caverns, caves, dungeon, catacombs)
        Tutorial/beginning and ending to the game
    
    Back to the here and now.
    I still need sounds to be a little smarter.
    Actions should have sounds associated with them instead of just names.
    Actions should modify the sounds they make based on who is performing them.
    Ranged weapons should sound different from melee weapons.
    Clubs should sound different from swords and daggers.
    Footsteps should sound different depending on what you're stepping on.
    Everything should sound different depending on where you are (IE reverb/delay).

7/28/24
    In the home stretch of the time I allotted for my first pass at sound.
    I think it's gone pretty well. I'm gonna say I'll put the finishing touches on tomorrow.
    After that, I'll export an Alpha 0.5 playtest build, and work on bugfixes while I get ready for 0.6

    0.6 Outline
    Start by fleshing out the object class and fixing object problems.
        Changing object opacities while characters are standing on them are producing AI malfunctions.
        Objects remain difficult terrain even after being destroyed.
        Objects can be piled on one square, and yet only one object is displayed and accessible
            This is a design question as well. Should multiple objects be able to occupy the same space?
        Enemies can't use doors yet because enemy AI just looks at tile traversability.
        Doors currently just delete themselves upon being opened.
            They should probably do something more sophisticated like change state to "open"
            They could also have other states like "locked/unlocked/barricaded/etc"
            This also opens up the question of one-tile-multiple-actions.
                Currently every tile in the game has a clear action associated with it. If enemy: attack, else move.
                If there is a door that is shut, and you need to be able to open, kick, lock, unlock, barricade, etc,
                then I will have to add action prompts or some other similar UI workaround.
        Objects are displayed like walls if and only if their opacity is 1. This may be a problem at some point. Not sure.
    Then add new objects with sophisticated behaviors and states:
        Exploding barrels
        Spreading liquids, gases, and fire
        Traps and hazards such as caltrops, bear traps, spiderwebs, and deafall/spike traps
        Secluded fire pits/bonfires that offer characters a chance to rest and heal
        Detailed descriptions that appear upon close inspection
            Inscriptions, statue descriptions, etc
        Levers, pressure plates, buttons, and things for them to operate such as gates or traps.
        Objects that break apart into rubble or refuse
        Objects that can be broken when nearby attacks miss
        Chests, sarcophagi, and other objects that can contain items (Start with objects that dump items onto floor)
        Lootable corpses that follow the same rules as chests
            Corpses that contain items held
            Corpses that contain ammunition/thrown weapons once those are implemented (Alpha 0.7)
            Corpses that contain other items if I decide to add those (Alpha 0.7)
    Then add more sophisticated interactions between objects, and between objects and enemies
        Beds that enemies sleep in
        Hazards like chasms, cliffs, and perhaps bodies of deep water
        Multi-tile bridges that can be destroyed
        Levers that enemies pull to activate traps
        Bespoke forms of cover that enemies preferentially hide behind
            May carry some mechanical advantage like allowing unhindered attacks from one side
        Cages that contain wild enemies like dogs/wolves/other 3rd party creatures
            Can be destroyed to loose a dangerous creature on the battlefield to wreak havoc among enemies
        Potentially posts that can have guard animals chained to them
        Light sources out in the world that enemies can use, move, pick up, or extinguish strategically
    Then playtest, bugfix, and get ready for Alpha 0.7

    What's left for 0.4?
    I want the role sounds play, both mechanically, and sonically, to be a little more modular.
        Actions should have a loudness and a sound effect.
        The sound effect should be pulled from somewhere related to the action.
        If it's an attack, it should tailor its sound to the weapon and perhaps the attacker.
        If it's a move, then it should tailor the sound effect to the person moving, and the tile being stepped on.
        As the player characters move around, the effects applied to in-game sounds should change to reflect the environment
            Reverb amount and time 
                Hard rough tiles increase reverb amount, soft tiles diminish it
                Large spaces increase reverb time, small spaces diminish it
            Delay amount and time 
                Hard smooth tiles increase delay amount (IE feedback), soft or rough tiles diminish it
                Large spaces increase delay time, small spaces diminish it
            Lowpass filter amount
                Soft tiles increase the lowpass filter effect applied to reverb and delay
7/29/24
    So I still have some things left to do for full sound, but honestly all of them are pretty minor.

    I think I'm ready to move on to my object overhaul. Hoping that will also only take about a week.
    Mostly I'm just hoping that this stuff will go quickly because I know there are some slower things on the horizon.

7/30/24
    Gonna finish up the Alpha 0.5 playtest build today. After that I'm gonna go climb, and then come back and start on 0.6.

    Just fixed the object updating problem!
    Also fixed the enemy stunning delay problem!

    