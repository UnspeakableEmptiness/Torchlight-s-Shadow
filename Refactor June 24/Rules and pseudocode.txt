Enemy AI Rework:
    States:
        idle (sometimes asleep)
            If awake, walk around periodically
        suspicious
            Triggered by sounds
            Become no longer surprisable
        investigating
            Triggered by loud sounds or seeing combat or its aftermath (dead or fleeing enemies)
            Walk around searching for player characters
        hostile
            Evaluate possible combinations of moves and actions based on a utility function
            Select the highest utility set of actions
        fleeing
            Adjust utility function to try to get away from player characters
            Still attack if no other option presents itself (IE, you are cornered)

    Utility function/search algorithmn
        General idea:
            The final utility of an enemy's move should be based on expected damage to PCs
        Considerations:
            Ranged enemies want to stay in range, but far away
            Melee enemies want to get close
            Tactical enemies want to overwatch if they have nothing better to do
            Reckless enemies want to dash to get closer to the PCs if they have nothing better to do

            Everyone wants to minimize to-hit penalties to their attacks
        
        If an enemy is in combat it should, on each turn:
            Consider all the possible targets on all the squares
            Evaluate all combinations of squares and targets for the one that maximizes damage potential
            Score all squares based on their desirability relative to the PC's positions
                melee characters want to be close to the action
                ranged characters want to be far away
            Pick between squares based on a weighted utility function
            Go to the best square
            Attack the target
            Potentially reposition yourself with the rest of your move

            Other possibilities:
                Some enemies could identify player character armor classes or target wounded PCs
                    But probably not. Almost every enemy should just target PCs based on their own modifiers
                Perhaps enemies should make plans that take longer than one turn to come to fruition
                    IE if I go down this hallway and emerge over there,
                    I can shoot the PCs from across this chasm
                Some enemies could have special attacks or alternate weapons
                    This would mean they would consider multiple attacks from each square they can reach
                    Utility functions could be written in a general way
                    So that attacks can be compared the same way targets can

Rules:
    atk bonuses and penalties:
        Flanking confers a +2 bonus to atk rolls
        Half cover confers a -2 penalty to attack rolls
        Three quarters cover confers a -5 penalty to attack rolls
        Hitting a stunned or prone enemy confers a +5 bonus to atk rolls
        Hitting a sleeping enemy confers a +10 bonus to atk rolls

    crits?
        10% chance to crit
        a crit is a critical hit if the attack hits (dealing double damage)
        a crit is a critical failure if the attack misses (damaging a weapon? or provoking an AOO)

    kicking
        0 damage attack that knocks the enemy prone if it lands (preventing AOOs and movement next turn)
    
    shoving
        0 damage attack that can move an enemy one square further away
    
    jumping?
        potential alternate move that allows characters to traverse hazards
    
    sneak attacks
        fugitive special feature that deals extra damage to enemies
        activates whenever there is a net positive modifier on attack rolls such as flanking or stunned
    

Pseudocode for attack function rewrite
    The attack function is a method of the character class.

    One parent attack function for everybody that takes in a cb function as an argument
    it runs the atk roll function, and then passes the resulting object into the cb function
    if there is no cb function it just passes the standard attack roll on
    then it checks for special effects

    something either within the cb function or something separately passed to the attack function...
    will determine if there are special effects or not, and if so what they are.
    